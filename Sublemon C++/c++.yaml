# [PackageDev] target_format: plist, ext: tmLanguage
name: C/C++
scopeName: source.c++
fileTypes: [c, h, cpp, hpp, cu, cuh]

patterns:
- include: '#code'

repository:
  code:
    patterns:
    - include: '#typedef'
    - include: '#functions'
    - include: '#types'
    - include: '#inner-code'

  inner-code:
    patterns:
    - include: '#comments'
    - include: '#macros'
    - include: '#operators'
    - include: '#constants'
    - include: '#storage'
    - include: '#winapi'
    - include: '#strings'
    - include: '#lambda'

  inner-code-on-brackets:
    patterns:
    - begin: '\('
      end: '\)'
      patterns:
      - include: '#inner-code-with-brackets'
    - begin: '{'
      end: '}'
      patterns:
      - include: '#inner-code-with-brackets'

  inner-code-with-brackets:
    patterns:
    - include: '#inner-code-on-brackets'
    - include: '#inner-code'

  comments:
    patterns:
    - match: ^\s*(?=/[*/])
    - name: comment.line.documentation.c++
      begin: //[/!].*$
      end: $
      patterns:
      - include: "#doxygen"
    - name: comment.line.double-slash.c++
      match: //.*$
    - name: comment.block.empty.c
      match: /\*\*/
    - name: comment.block.documentation.c++
      begin: /\*[\*!]
      patterns:
      - include: "#doxygen"
      end: \*/
    - name: comment.block.c
      match: (/\*).*?(\*/)
    - name: comment.block.c
      begin: /\*
      end: \*/

  doxygen:
    patterns:
    - match: (?<=\s)([\\@]param(?:\[.*\])?)\s+(\w[\w,.]*)
      captures:
        '1': {name: keyword.other.doxygen}
        '2': {name: variable.parameter.doxygen}
    - match: (?<=\s)([\\@](?:file|exception|throws?))\s+(\w[\w,.]*)
      captures:
        '1': {name: keyword.other.doxygen}
        '2': {name: variable.parameter.doxygen}
    - name: keyword.other.doxygen
      match: (?<=\s)[\\@]\w+

  strings:
    patterns:
    - name: string.quoted.double.c++
      begin: 'L?"'
      end: '(")|$'
      captures:
        '1': {name: punctuation.definition.string.c++}
      patterns:
      - name: constant.character.escape.c++
        match: \\([abfnrt'"\\]|[0-7]{3}|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4}|U[0-9a-fA-F]{8})

  storage:
    patterns:
    - name: storage.modifier.c
      match: \b(const|extern|register|restrict|static|volatile|inline)\b
    - name: storage.modifier.c++
      match: \b(friend|explicit|virtual|private|public|protected|mutable)\b
    - name: storage.modifier.cuda
      match: \b__(shared|constant|global)__\b
    - name: storage.type.c
      match: \b(void|unsigned|char|short|int|long|float|double|struct)\b
    - name: storage.type.c++
      match: \b(auto|bool|wchar_t|__int(8|16|32|64))\b
    - name: support.type.c
      match: \b(size_t)\b
    - name: meta.std.c++
      match: \b(std)(::)(?=\w)
      captures:
        '1': {name: storage.modifier.namespace.c++}
        '2': {name: punctuation.separator.namespace.c++}

  constants:
    patterns:
    - name: constant.numeric.c++
      match: \b(0[xX][0-9a-fA-F]+|0[0-7]+)\b
    - name: constant.numeric.c++
      match: ((?<=\s|[=+*/%-(]|^)-)?\b[0-9]+\.?[0-9]*([eE][+-]?[0-9]+)?([uU]?[lL][lL]|[fF])?\b
    - name: constant.language.c++
      match: \b(nullptr|true|false)\b
    - name: constant.language.c
      match: \b(NULL|TRUE|FALSE)\b
    - name: variable.language.c++
      match: \b(this)\b
    - name: constant.character.c++
      match: "L?'(\\\\([abfnrt'\"\\\\]|[0-7]{3}|x[0-9a-fA-F]{2})|u[0-9a-fA-F]{4}|U[0-9a-fA-F]{8}|.)'"

  winapi:
    patterns:
    - name: support.type.winapi.c
      match: \b(LP|P)?(VOID|CHAR|BYTE|D?WORD|U?INT(32|64)|U?LONG(LONG)?|BOOL|HANDLE|CS[WT]?TR)\b
    - name: support.type.winapi.c
      match: \bP?(LARGE_INTEGER)\b

  operators:
    patterns:
    - name: keyword.control.c++
      match: \b(return|break|case|continue|default|do|while|switch|if|else|goto|try|catch|throw|new|delete)\b
    - name: meta.operator.for.c++
      begin: \b(for)\s*\(
      end: \)
      beginCaptures:
        '1': {name: keyword.control.c++}
      patterns:
      - include: '#inner-code-with-brackets'
      - name: keyword.operator.in.c++
        match: ':'
    - name: meta.operator.cast.c++
      begin: \b((?:const|dynamic|reinterpret|static)_cast)<
      end: '>'
      beginCaptures:
        '1': {name: keyword.operator.character.c++}
      patterns:
      - include: '#inner-code'
    - begin: '\?'
      end: ':'
      captures:
        '0': {name: keyword.operator.ternary.c}
      patterns:
      - include: '#inner-code'
    - begin: '<<<'
      end: '>>>'
      patterns:
      - include: '#inner-code'
    - begin: '(?<![<=])<(?![<=])(?=\w.*?[\w>*)]>)'
      end: '>'
      patterns:
      - include: '#inner-code'
    - name: support.function.c++
      match: \b(sizeof|decltype)\b
    - name: keyword.operator.symbolic.c++
      match: '[&|+-]{1,2}|([+*/%&^|<>=-]|<<|>>>?)=?|!=|->'
    - name: keyword.operator.unary.c
      match: '!'
    - name: punctuation.separator.namespace.c++
      match: '(?<=\w)::(?=\w)'
    - match: \b(using(?:\s+namespace))\s+(\w+)
      captures:
        '1': {name: keyword.other.c++}

  functions:
    patterns:
    - name: meta.function.c++
      begin: '(?=[\w~_][^=;]+\()'
      end: (})|(?=;)
      endCaptures:
        '1': {name: punctuation.section.function.c++}
      patterns:
      - name: meta.initialise-list.c++
        begin: '(?<=\))\s*:'
        end: \s*(?=[{;])
        patterns:
        - include: '#inner-code-with-brackets'
      - name: meta.function.identifier.c++
        begin: (?=[\w:]*(~?\w|operator(\(\)|\S+?))+\s*\()
        end: '\)(?:\s*(const))?'
        captures:
          '1': {name: storage.modifier.c}
        patterns:
        - begin: (?=[\w:]*(~?\w|operator(\(\)|\S+?))+\s*\()
          end: (?=\()
          patterns:
          - name: entity.name.function.c++
            match: operator(\(\)|\S+?)(?=\s*\()
          - name: entity.name.function.c++
            match: ~?\w+(?=\s*\()
          - name: storage.modifier.namespace.c++
            match: \w+
          - name: punctuation.separator.namespace.c++
            match: '::'
        - begin: '\('
          end: (?=\))
          patterns:
          - include: '#function-parameters'
      - name: meta.function.body.c++
        begin: '{'
        beginCaptures:
          '0': {name: punctuation.section.function.c++}
        end: (?=})
        patterns:
        - include: '#inner-code-with-brackets'
      - include: '#inner-code'
      - name: storage.type.c++
        match: \w+
      - match: \S+;

  function-parameters:
    patterns:
    - begin: (?==)
      end: (?=[,)])
      patterns:
      - include: '#inner-code'
    - include: '#inner-code'
    - match: (\w+)\s*(?=[,)\[=])
      captures:
        '1': {name: variable.parameter.c++}
    - name: storage.type.c++
      match: \w+

  lambda:
    patterns:
    - begin: (?:^|(?<=[\s,]))(?=\[.*?\]\s*\()
      end: '\)'
      patterns:
      - begin: (\[[=&]?)(?=.*?\]\s*\()
        end: '(\])'
        captures:
          '1': {name: punctuation.definition.lambda.capture-list.c++}
        patterns:
        - include: '#inner-code'
      - begin: '\('
        end: (?=\))
        patterns:
        - include: '#function-parameters'

  types:
    patterns:
    - name: meta.type.identifier.c++
      match: \b(namespace|union)\s+(\w+)
      captures:
        '1': {name: storage.modifier.c++}
        '2': {name: entity.name.support.c++}
    - name: meta.type.c++
      begin: ((class|struct|enum)\s+(\w+)?)
      end: (})|(?=;)
      beginCaptures:
        '1': {name: meta.type.identifier.c++}
        '2': {name: storage.modifier.c++}
        '3': {name: entity.name.type.c++}
      patterns:
      - name: meta.type.body.c++
        begin: '{'
        beginCaptures:
          '0': {name: punctuation.section.type.c++}
        end: (?=})
        patterns:
        - include: '#inner-code-on-brackets'
        - include: '#code'

  typedef:
    patterns:
    - name: meta.typedef.c++
      begin: (typedef)\s+(?=.*?\(\*.*?\))
      end: ';'
      beginCaptures:
        '1': {name: storage.modifier.c++}
      endCaptures:
        '0': {name: punctuation.terminator.c}
      patterns:
      - match: \((\*)\b(.*?)\b\)
        captures:
          '1': {name: keyword.operator.asterisk.c}
          '2': {name: entity.name.typedef.c++}
      - begin: '\('
        end: (?=\))
        patterns:
        - include: '#function-parameters'
      - include: '#inner-code'
    - name: meta.typedef.c++
      begin: (typedef)\s+(?=.+?\w+\s*;)
      end: (\w+)\s*(;)
      beginCaptures:
        '1': {name: storage.modifier.c++}
      endCaptures:
        '1': {name: entity.name.typedef.c++}
        '2': {name: punctuation.terminator.c}
      patterns:
      - include: '#inner-code'

  macros:
    patterns:
    - name: meta.macro.c
      begin: '^\s*(#)(?=\s*\w+)'
      end: '(?<!\\)\n'
      beginCaptures:
        '1': {name: punctuation.definition.macro.c}
      patterns:
      - match: '(?<=#)\s*(include)\s*(".*"|<.*>|(.*))'
        captures:
          '1': {name: keyword.macro.c}
          '2': {name: string.quoted.macro.c}
          '3': {name: invalid.illegal.macro.c}
      - begin: (?<=#)\s*(define)\s+(\w+)\(
        end: \)
        beginCaptures:
          '1': {name: keyword.macro.c}
          '2': {name: entity.name.function.macro.c}
        patterns:
        - name: variable.parameter.macro.c
          match: \w+
      - match: '(?<=#)\s*(define)\s*(\w+)'
        captures:
          '1': {name: keyword.macro.c}
          '2': {name: variable.constant.macro.c}
      - match: '(?<=#)\s*(ifn?def|undef)\s*(\w+)'
        captures:
          '1': {name: keyword.macro.c}
          '2': {name: variable.constant.macro.c}
      - name: keyword.macro.c
        match: (?<=#)\s*(\w+)
      - match: (defined)(?:\s*\((\w+)\)|\s+(\w+))
        captures:
          '1': {name: keyword.macro.c}
          '2': {name: variable.constant.macro.c}
          '3': {name: variable.constant.macro.c}
      - name: punctuation.separator.line.macro.c
        match: '\\$'
      - include: '#constants'
      - include: '#comments'
      - name: meta.macro.body.c
        match: .
