# [PackageDev] target_format: plist, ext: tmLanguage
name: Java
scopeName: source.java
fileTypes: [java]
uuid: 2B449DF6-6B1D-11D9-94EC-000D93589AF6

patterns:
- name: meta.package.java
  begin: ^\s*(package)\b\s*
  end: \s*(?:$|(;))
  beginCaptures:
    '1': {name: keyword.other.package.java}
  endCaptures:
    '1': {name: punctuation.terminator.java}
  patterns:
  - name: punctuation.separator.java
    match: \.

- name: meta.import.java
  contentName: storage.type.package.java
  begin: (import\s+(?:static)?)\b\s*
  beginCaptures:
    '1': {name: keyword.other.import.java}
  end: \s*(?:$|(;))
  endCaptures:
    '1': {name: punctuation.terminator.java}
  patterns:
  - name: punctuation.separator.java
    match: \.

- include: '#code'

repository:
  all-types:
    patterns:
    - include: '#primitive-arrays'
    - include: '#primitive-types'
    - include: '#object-types'

  annotations:
    patterns:
    - name: meta.declaration.annotation.java
      begin: (@[^ (]+)(\()
      beginCaptures:
        '1': {name: storage.type.annotation.java}
        '2': {name: punctuation.definition.annotation-arguments.begin.java}
      end: (\))
      endCaptures:
        '1': {name: punctuation.definition.annotation-arguments.end.java}
      patterns:
      - match: (\w*)\s*(=)
        captures:
          '1': {name: constant.other.key.java}
          '2': {name: keyword.operator.assignment.java}
      - include: '#code'
      - name: punctuation.separator.property.java
        match: ','
    - name: storage.type.annotation.java
      match: '@\w*'

  anonymous-classes-and-new:
    begin: \bnew\b
    beginCaptures:
      '0': {name: keyword.control.new.java}
    end: (?<=\)|\])(?!\s*{)|(?<=})|(?=;)
    patterns:
    - begin: (\w+)\s*(?=\[)
      beginCaptures:
        '1': {name: storage.type.java}
      end: (})|(?=\s*(?:,|;|\)))
      endCaptures:
        '1': {name: punctuation.section.block.end.java}
      patterns:
      - begin: \[
        end: \]
        patterns:
        - include: '#code'
      - begin: '{'
        beginCaptures:
          '0': {name: punctuation.section.block.begin.java}
        end: (?=})
        patterns:
        - include: '#code'
    - begin: (?=\w.*\()
      end: (?<=\))
      patterns:
      - include: '#object-types'
      - include: '#comments'
      - begin: \(
        beginCaptures:
          '1': {name: storage.type.java}
        end: \)
        patterns:
        - include: '#code'
    - name: meta.inner-class.java
      begin: '{'
      beginCaptures:
        '0': {name: punctuation.section.inner-class.begin.java}
      end: '}'
      endCaptures:
        '0': {name: punctuation.section.inner-class.end.java}
      patterns:
      - include: '#class-body'

  assertions:
    patterns:
    - name: meta.declaration.assertion.java
      begin: \b(assert)\s
      beginCaptures:
        '1': {name: keyword.control.assert.java}
      end: $
      patterns:
      - name: keyword.operator.assert.expression-separator.java
        match: ':'
      - include: '#code'

  class:
    name: meta.class.java
    begin: (?=\w?[\w\s]*(?:class|(?:@)?interface|enum)\s+\w+)
    end: '\}'
    endCaptures:
      '0': {name: punctuation.section.class.end.java}
    patterns:
    - include: '#storage-modifiers'
    - include: '#comments'
    - name: meta.class.identifier.java
      match: (class|(?:@)?interface|enum)\s+(\w+)
      captures:
        '1': {name: storage.modifier.java}
        '2': {name: entity.name.type.class.java}
    - begin: (?=<)
      end: (?<=>)
      patterns:
      - include: '#generics'
    - name: meta.definition.class.inherited.classes.java
      begin: extends
      beginCaptures:
        '0': {name: storage.modifier.extends.java}
      end: (?=\{|implements)
      patterns:
      - include: '#object-types-inherited'
      - include: '#comments'
    - name: meta.definition.class.implemented.interfaces.java
      begin: (implements)\s
      beginCaptures:
        '1': {name: storage.modifier.implements.java}
      end: (?=\s*extends|\{)
      patterns:
      - include: '#object-types-inherited'
      - include: '#comments'
    - name: meta.class.body.java
      begin: '\{'
      beginCaptures:
        '0': {name: punctuation.section.class.begin.java}
      end: (?=\})
      patterns:
      - include: '#class-body'

  class-body:
    patterns:
    - include: '#comments'
    - include: '#class'
    - include: '#enums'
    - include: '#variables'
    - include: '#methods'
    - include: '#annotations'
    - include: '#storage-modifiers'
    - include: '#code'

  code:
    patterns:
    - include: '#comments'
    - include: '#annotations'
    - include: '#class'
    - begin: '{'
      beginCaptures:
        '0': {name: punctuation.section.block.begin.java}
      end: '}'
      endCaptures:
        '0': {name: punctuation.section.block.end.java}
      patterns:
      - include: '#code'
    - include: '#assertions'
    - include: '#parens'
    - include: '#constants-and-special-vars'
    - include: '#anonymous-classes-and-new'
    - include: '#switch-selectors'
    - include: '#keywords'
    - include: '#storage-modifiers'
    - include: '#method-call'
    - include: '#strings'
    - include: '#all-types'

  comments:
    patterns:
    - name: comment.block.empty.java
      match: /\*\*/
      captures:
        '0': {name: punctuation.definition.comment.java}
    - name: comment.block.documentation.java
      begin: /\*\*
      end: \*/
      captures:
        '0': {name: punctuation.definition.comment.java}
      patterns:
      - name: keyword.other.javadoc.java
        match: '@param\s+[\w\d]+'
      - name: keyword.other.javadoc.java
        match: '@[\w\d]+'
    - name: comment.block.java
      match: (/\*).+?(\*/)
      captures:
        '1': {name: punctuation.definition.comment.java}
        '2': {name: punctuation.definition.comment.java}
    - name: comment.block.java
      begin: /\*
      end: \*/
      captures:
        '0': {name: punctuation.definition.comment.java}
    - name: comment.line.double-slash.java
      match: (//).*$
      captures:
        '1': {name: punctuation.definition.comment.java}

  constants-and-special-vars:
    patterns:
    - name: constant.language.java
      match: \b(true|false|null)\b
    - name: variable.language.java
      match: \b(this|super)\b
    - name: constant.numeric.hex.java
      match: \b0[xX]\h([\h_]*\h)?[lL]?(?!\w|\.)
    - name: constant.numeric.octal.java
      match: \b0[0-7_]*[0-7][lL]?\b
    - name: constant.numeric.binary.java
      match: \b0[bB][01]([01_]*[01])?[lL]?\b
    - name: constant.numeric.integer.java
      match: \b(0|[1-9]([0-9_]*[0-9])?)[lL]?(?!\w|\.)
    - name: constant.numeric.hex-float.java
      match: (?<!\w)(?>0[xX](\h([\h_]*\h)?)?((?<=\h)\.| \.(?=\h)|(?<=\h))(\h([\h_]*\h)?)?[pP][+-]?(0|[1-9]([0-9_]*[0-9])?)[fFdD]?)(?!\w)
    - name: constant.numeric.float.java
      match: (?<!\w)(?>((0|[1-9]([0-9_]*[0-9])?)(?=[eEfFdD.]))?((?<=[0-9])(?=[eEfFdD])|\.)([0-9]([0-9_]*[0-9])?)?([eE][+-]?(0|[1-9]([0-9_]*[0-9])?))?[fFdD]?)(?!\w)
    - match: (\.)?\b([A-Z][A-Z0-9_]+)(?!<|\.class|\s*\w+\s*=)\b
      captures:
        '1': {name: keyword.operator.dereference.java}
        '2': {name: variable.constant.java}

  enums:
    begin: ^(?=\s*[A-Z0-9_]+\s*({|\(|,))
    end: (?=;|})
    patterns:
    - name: meta.enum.java
      begin: \w+
      beginCaptures:
        '0': {name: variable.constant.enum.java}
      end: (?=,|;|})
      patterns:
      - include: '#parens'
      - begin: '{'
        beginCaptures:
          '0': {name: punctuation.section.enum.begin.java}
        end: '}'
        endCaptures:
          '0': {name: punctuation.section.enum.end.java}
        patterns:
        - include: '#class-body'
    - include: '#comments'

  keywords:
    patterns:
    - name: keyword.control.catch-exception.java
      match: \b(try|catch|finally|throw)\b
    - name: keyword.control.ternary.java
      match: '\?|:'
    - name: keyword.control.java
      match: \b(return|break|case|continue|default|do|while|for|switch|if|else)\b
    - name: keyword.operator.instanceof.java
      match: \b(instanceof)\b
    - name: keyword.operator.bitwise.java
      match: (<<|>>>?|~|\^)
    - name: keyword.operator.assignment.bitwise.java
      match: ((&|\^|\||<<|>>>?)=)
    - name: keyword.operator.comparison.java
      match: (===?|!=|<=|>=|<>|<|>)
    - name: keyword.operator.assignment.arithmetic.java
      match: '[+*/\%-]='
    - name: keyword.operator.assignment.java
      match: '='
    - name: keyword.operator.increment-decrement.java
      match: (\-\-|\+\+)
    - name: keyword.operator.arithmetic.java
      match: (\-|\+|\*|\/|%)
    - name: keyword.operator.logical.java
      match: (&&|\|\|)
    - name: keyword.operator.unary.logical.java
      match: '!'
    - name: keyword.operator.bitwise.java
      match: (\||&)
    - name: keyword.operator.unary.bitwise.java
      match: '~'
    - name: keyword.operator.dereference.java
      match: (?<=\S)\.(?=\S)
    - name: punctuation.terminator.java
      match: ';'

  method-call:
    name: meta.method-call.java
    begin: ([\w$]+)(\()
    beginCaptures:
      '1': {name: meta.method.java}
      '2': {name: punctuation.definition.method-parameters.begin.java}
    end: \)
    endCaptures:
      '0': {name: punctuation.definition.method-parameters.end.java}
    patterns:
    - name: punctuation.definition.separator.parameter.java
      match: ','
    - include: '#code'

  methods:
    name: meta.method.java
    begin: (?!new)(?=[\w<].*\s+)(?=([^=/]|/(?!/))+\()
    end: (})|(?=;)
    endCaptures:
      '1': {name: punctuation.section.method.end.java}
    patterns:
    - include: '#storage-modifiers'
    - name: meta.method.identifier.java
      begin: (\w+)\s*\(
      beginCaptures:
        '1': {name: entity.name.function.java}
      end: \)
      patterns:
      - include: '#parameters'
      - include: '#comments'
    - name: meta.type.token.java
      begin: (?=<)
      end: (?<=>)
      patterns:
      - include: '#generics'
    - name: meta.method.return-type.java
      begin: (?=\w.*(\s+|\b)\w+\s*\()
      end: (?=\w+\s*\()
      patterns:
      - include: '#all-types'
      - include: '#comments'
    - include: '#throws'
    - name: meta.method.body.java
      begin: '{'
      beginCaptures:
        '0': {name: punctuation.section.method.begin.java}
      end: (?=})
      patterns:
      - include: '#code'
    - include: '#comments'

  object-types:
    patterns:
    - begin: \b(?=([a-z_]\w*\.)+[A-Z])
      end: (?=[A-Z])
      contentName: storage.type.package.java
      patterns:
      - name: punctuation.separator.java
        match: \.
    - begin: \b([A-Z]+\w*)(?=<)
      end: (?<=>)
      beginCaptures:
        '1': {name: storage.type.java}
      patterns:
      - include: '#generics'
    - begin: \b([A-Z]+\w*)(?=\[)
      end: (?<=\])
      beginCaptures:
        '1': {name: storage.type.java}
      patterns:
      - begin: \[
        end: \]
        patterns:
        - include: '#code'
    - name: storage.type.java
      match: \b[A-Z]+\w*\b

  generics:
    patterns:
    - name: keyword.operator.diamond.java
      match: '<>'
    - name: meta.generics.java
      begin: '<'
      end: '>'
      captures:
        '0': {name: punctuation.definition.generics.java}
      patterns:
      - name: keyword.operator.wildcard.java
        match: \?
      - name: keyword.operator.java
        match: \&
      - name: storage.modifier.java
        match: \b(extends|super)\b
      - include: '#object-types'
      - include: '#comments'

  object-types-inherited:
    patterns:
    - begin: \b((?:[a-z]\w*\.)*[A-Z]+[\w\.\$]*)(?=<)
      end: (?<=>)
      beginCaptures:
        '1': {name: entity.other.inherited-class.java}
      patterns:
      - include: '#generics'
    - name: entity.other.inherited-class.java
      match: \b(?:[a-z]\w*\.)*[A-Z]+[\w\.\$]*\b

  parameters:
    patterns:
    - name: storage.modifier.java
      match: final
    - include: '#annotations'
    - include: '#primitive-arrays'
    - include: '#primitive-types'
    - include: '#object-types'
    - name: variable.parameter.java
      match: \w+

  parens:
    begin: \(
    end: \)
    patterns:
    - include: '#code'

  primitive-arrays:
    patterns:
    - name: storage.type.primitive.array.java
      match: \b(?:void|boolean|byte|char|short|int|float|long|double)(\[\])*\b

  primitive-types:
    patterns:
    - name: storage.type.primitive.java
      match: \b(?:void|boolean|byte|char|short|int|float|long|double)\b

  storage-modifiers:
    match: \b(public|private|protected|static|final|native|synchronized|abstract|threadsafe|transient)\b
    captures:
      '1': {name: storage.modifier.java}

  strings:
    patterns:
    - name: string.quoted.double.java
      begin: '"'
      end: '(")|$'
      captures:
        '1': {name: punctuation.definition.string.java}
      patterns:
      - name: constant.character.escape.java
        match: \\[tbnrf'"\\]
    - name: constant.character.java
      match: "'(\\\\[tbnrf'\"\\\\]|.)'"

  switch-selectors:
    patterns:
    - match: '\b(default):'
      captures:
        '1': {name: keyword.control.java}
    - begin: \b(case)\b
      beginCaptures:
        '0': {name: keyword.control.java}
      end: ':'
      patterns:
      - include: '#code'

  throws:
    name: meta.throwables.java
    begin: throws
    beginCaptures:
      '0': {name: storage.modifier.java}
    end: (?={|;)
    patterns:
    - include: '#object-types'

  values:
    patterns:
    - include: '#strings'
    - include: '#object-types'
    - include: '#constants-and-special-vars'

  variables:
    patterns:
    - name: meta.definition.variable.java
      begin: (?=(?:(?:private|protected|public|native|synchronized|abstract|threadsafe|transient|static|final)|(?:void|boolean|byte|char|short|int|float|long|double)|(?:(?:[a-z]\w*\.)*[A-Z]+\w*))\s+(?!private|protected|public|native|synchronized|abstract|threadsafe|transient|static|final|void|boolean|byte|char|short|int|float|long|double)[\w\d_<>\[\],\?][\w\d_<>\[\],\? \t]*(?:=|$))
      end: (?=;)
      patterns:
      - match: \s
      - match: ([A-Z_0-9]+)\s+(?=\=)
        captures:
          '1': {name: variable.constant.java}
      - match: (\w[^\s,]*)\s+(?=\=)
        captures:
          '1': {name: meta.definition.variable.name.java}
      - begin: '='
        beginCaptures:
          '0': {name: keyword.operator.assignment.java}
        end: (?=;)
        patterns:
        - include: '#code'
      - match: (\w[^\s=]*)(?=\s*;)
        captures:
          '1': {name: meta.definition.variable.name.java}
      - include: '#code'
    applyEndPatternLast: 1
