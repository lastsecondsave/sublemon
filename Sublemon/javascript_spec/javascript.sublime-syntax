%YAML 1.2
---
name: JavaScript
scope: source.js
file_extensions: [js, jsm]

variables:
  id: '(?:\b[A-Za-z$_][\w$]*\b)'
  after_operator: (?:(?<=[=(:,&|?]|^|return\s)\s*)

contexts:
  prototype:
  - include: comments

  main:
  - include: strings
  - include: constants
  - include: keywords
  - include: operators
  - include: prototypes
  - include: functions
  - include: support
  - include: bracket_balancing

  bracket_balancing:
  - match: \{
    push:
    - match: \}
      pop: true
    - include: main
    - include: fields
  - match: \(
    push:
    - match: \)
      pop: true
    - include: main
  - match: \[
    push:
    - match: \]
      pop: true
    - include: main
  - match: '[)}\]]'
    scope: invalid.illegal.stray-bracket

  pop_before_space:
  - match: (?=\S)
    pop: true

  comments:
  - match: /\*-\s+(.+?)\s+-\*/
    scope: comment.block.javascript
    captures:
      1: comment.mark.javascript
  - match: /\*.*?\*/
    scope: comment.block.javascript
  - match: /\*
    push:
    - meta_scope: comment.block.javascript
    - match: \*/
      pop: true
  - match: //.*$
    scope: comment.line.javascript

  strings:
  # TODO: replace with backtracking when fixed
  # Double quoted
  - match: '"'
    push:
    - meta_scope: string.quoted.javascript
    - meta_include_prototype: false
    - match: '"'
      pop: true
  # Single quoted
    - include: string_body
  - match: "'"
    push:
    - meta_scope: string.quoted.javascript
    - meta_include_prototype: false
    - match: "'"
      pop: true
    - include: string_body
  # Regular Expression
  - match: '{{after_operator}}(/)(?=[^/*+?])'
    captures:
      1: punctuation.definition.regexp.javascript
    push: Packages/Sublemon/regexp.sublime-syntax
    with_prototype:
    - match: '/[igm]*'
      scope: punctuation.definition.regexp.javascript
      pop: true

  string_body:
    - match: (?<!\\)\n
      pop: true
    - match: '[^''"\\](?=\n)$'
      scope: invalid.illegal.missing-quote
    - match: '\\([bfnrt''"\\]|u[0-9a-fA-F]{4})'
      scope: constant.character.escape.javascript
    - match: \\(?=\n)
      scope: punctuation.separator.line.javascript
    - match: \\.
      scope: invalid.illegal.wrong-escape

  constants:
  - match: '\b(0[xX][0-9a-fA-F]+|0[0-7]+)\b'
    scope: constant.numeric.javascript
  - match: '((?<=[\s=+*/%-(]|^)-)?\b[0-9]+\.?[0-9]*([eE][+-]?[0-9]+)?\b'
    scope: constant.numeric.javascript
  - match: \b(?>false|Infinity|NaN|null|true|undefined)\b
    scope: constant.language.javascript
  - match: \b(this)\b
    scope: variable.language.javascript
  - match: \b(?>var|let)\b
    scope: storage.type.javascript

  keywords:
  - match: \b(?>break|catch|continue|delete|else|finally|return|throw|try|yield\*?)\b
    scope: keyword.control.javascript
  - match: \b(?>if|for|while)\b
    scope: keyword.control.javascript
    push: semicolon_after_bracket_check
  # do-while
  - match: '\bdo\b'
    scope: keyword.control.javascript
    push:
    - match: '\bwhile\b'
      scope: keyword.control.javascript
      pop: true
    - include: main
  - match: \bswitch\b
    scope: keyword.control.javascript
    push: [switch_body, function_parameters]

  switch_body:
  - match: \{
    set:
    - match: \}
      pop: true
    - match: (?>case|default)
      scope: keyword.control.javascript
    - include: main
  - include: pop_before_space

  semicolon_after_bracket_check:
  - match: \(
    set:
    - match: \)
      set:
      - match: ';'
        scope: invalid.illegal.bad-semicolon
      - match: (?=\S)
        pop: true
    - include: main
  - include: pop_before_space

  operators:
  - match: (?>[&|+-]{1,2}|([+*/%&^|<>=-]|<<|>>>?)=?|[=!]==?|<>)
    scope: keyword.operator.javascript
  - match: '[!~]'
    scope: keyword.operator.unary.javascript
  - match: \?
    scope: keyword.operator.ternary.javascript
    push:
    - match: ':'
      scope: keyword.operator.ternary.javascript
      pop: true
    - include: main
  - match: \b(?>in|of|typeof|void|with)\b
    scope: keyword.operator.alphanumeric.javascript
  - match: '\b(instanceof)\s+({{id}})\b'
    captures:
      1: keyword.operator.alphanumeric.javascript
      2: support.class.javascript
  - match: '\b(new)\s+({{id}})\b'
    captures:
      1: keyword.control.javascript
      2: support.class.javascript

  support:
  - match: \b(?<!\.)(?>console|window|document)\b
    scope: support.constant.javascript
  - match: \b(?>Array|Function|JSON|Math|Object)\b
    scope: support.class.javascript
  - match: \b(?>(decode|encode)URI(Component)?|eval|is(Finite|NaN)|parse(Float|Int))\b
    scope: support.function.javascript
  - match: (?<=.)(?>bind|call)(?=\s*\()
    scope: support.function.javascript

  fields:
  - match: '({{id}})\s*:'
    captures:
      1: entity.name.field.javascript

  prototypes:
  # Object.prototype.f = function()
  - match: (({{id}})\.(prototype)\.({{id}}))\s*(=)\s*(?=function)
    captures:
      1: meta.function.identifier.javascript
      2: support.type.javascript
      3: keyword.other.javascript
      4: entity.name.function.javascript
  - match: '({{id}})\.(prototype)\b'
    captures:
      1: support.type.javascript
      2: keyword.other.javascript

  functions:
  # f: function()
  - match: \b({{id}})\s*:\s*(?=function)
    captures:
      1: entity.name.function.javascript
  # f = function()
  - match: \b({{id}})(?=\s*=\s*function)
    captures:
      1: entity.name.function.javascript
  # function f()
  - match: \b(function\*?)(?:\s+({{id}}))?
    captures:
      1: storage.type.function.javascript
      2: entity.name.function.javascript
    push: [function_body, function_parameters]
  # f = () => {...}
  - match: \b({{id}})(?=\s*=\s*(?:\([^(]*?\)|{{id}})\s*=>)
    captures:
      1: entity.name.function.javascript
  # (...) =>
  - match: (?=\([^(]*?\)\s*=>)
    push: function_parameters
  # = (a,
  - match: '{{after_operator}}(?=\(\s*{{id}}\s*,)'
    push: function_parameters
  # a =>
  - match: '({{id}})?\s*(=>)'
    captures:
      1: variable.parameter.function.javascript
      2: keyword.operator.lambda.javascript
    push: function_body

  function_parameters:
  - match: \(
    set:
    - meta_scope: meta.function.paremeters.javascript
    - match: \)
      pop: true
    - match: '{{id}}'
      scope: variable.parameter.function.javascript
    - match: '='
      scope: keyword.operator.javascript
      push:
      - match: (?=[,)])
        pop: true
      - include: main
  - match: \{
    scope: invalid.illegal.missing-function-parameters
    pop: true
  - include: pop_before_space

  function_body:
  - match: \{
    set:
    - meta_scope: meta.function.body.javascript
    - match: \}
      pop: true
    - include: main
  - include: pop_before_space
