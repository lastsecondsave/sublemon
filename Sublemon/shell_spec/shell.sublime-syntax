%YAML 1.2
---
name: Shell
scope: source.shell
file_extensions: [sh, bash, zsh]
first_line_match: '#!/.*'

variables:
  function_id: \b[[:alnum:]_-]+\b
  variable_id: \b[[:alpha:]_][[:alnum:]_]*\b
  word_end: (?=[\s\)\];]|$)

contexts:
  main:
  - include: expressions

  expressions:
  - include: predefined_expressions
  - match: (?=\S)
    push:
    - include: parameters
    - include: programs

  predefined_expressions:
  - include: comments
  - include: builtin_operators
  - include: builtin_functions
  - include: assignment_statement
  - include: functions

  expression_tokens:
  - include: strings
  - include: builtin_constants
  - include: command_substitution
  - include: parameter_expansion
  - include: comments
  - include: escapes
  - match: '[\{\}\[\]]|!=|=='

  expression_terminators:
  - include: separator_continuation
  - match: \n|(;)
    captures:
      1: punctuation.terminator.shell
    pop: true
  - match: \|\||&&
    scope: keyword.operator.logical.shell
    pop: true
  - match: \|
    scope: keyword.operator.pipe.shell
    pop: true
  - include: pop_before_brackets

  inner_expression_terminators:
  - include: separator_continuation
  - include: pop_before_brackets
  - match: (?=[;|&]|\n)
    pop: true

  separator_continuation:
  - match: (\\)\n
    captures:
      1: punctuation.separator.continuation.shell

  pop_before_brackets:
  - match: '(?=[\)\}`])'
    pop: true

  programs:
  - match: '[^\s''";\(\)`/]+(?=\s)'
    scope: variable.function.shell
    push: inner_parameters
  - match: '[^\s''";\(\)`/]+'
    push: inner_parameters

  parameters:
  - include: expression_terminators
  - include: expression_tokens
  - include: redirections

  inner_parameters:
  - include: inner_expression_terminators
  - include: expression_tokens
  - include: redirections

  pop_otherwise:
  - match: ''
    pop: true

  comments:
  - match: (?:^|\s)(#).*$
    captures:
      1: punctuation.definition.comment.shell
    scope: comment.line.shell

  tokens:
  - match: '[^\s''";\(\)`]+'
    scope: token.shell

  escapes:
  - match: \\.
    scope: constant.character.escape.shell

  strings:
  - match: "'"
    scope: punctuation.definition.string.begin.shell
    push:
    - meta_scope: string.quoted.single.shell
    - match: "'"
      scope: punctuation.definition.string.end.shell
      pop: true
  - match: '"'
    scope: punctuation.definition.string.begin.shell
    push:
    - meta_scope: string.quoted.double.shell
    - match: '"'
      scope: punctuation.definition.string.end.shell
      pop: true
    - include: escapes
    - include: command_substitution
    - include: parameter_expansion

  command_substitution:
  - match: (\$)(\()
    captures:
      1: punctuation.definition.command-substitution.shell
      2: punctuation.section.block.begin.shell
    push:
    - meta_scope: meta.block.command-substitution.braces.shell
    - match: \)
      scope: punctuation.section.block.end.shell
      pop: true
    - include: expressions
  - match: '`'
    scope: punctuation.section.block.begin.shell
    push:
    - meta_scope: meta.block.command-substitution.back-quote.shell
    - match: '`'
      scope: punctuation.section.block.end.shell
      pop: true
    - include: expressions

  parameter_expansion:
  - match: (\$)(\{)
    captures:
      1: punctuation.definition.parameter-expansion.shell
      2: punctuation.section.block.begin.shell
    push:
    - meta_scope: meta.block.parameter-expansion.shell
    - match: \}
      scope: punctuation.section.block.end.shell
      pop: true
    - include: expression_tokens

  builtin_constants:
  - match: true|false
    scope: constant.language.shell

  builtin_operators:
  - match: \b(if|elif|else|then|do|while|shift|break|continue){{word_end}}
    scope: keyword.control.shell
  - match: \b(return|fi|done|esac){{word_end}}
    scope: keyword.control.shell
    push:
    - include: comments
    - include: expression_terminators
  - match: \b(for)\s+({{variable_id}})\s+(in){{word_end}}
    captures:
      1: keyword.control.shell
      2: variable.parameter.shell
      3: keyword.control.shell
  - match: \b(case){{word_end}}
    scope: keyword.control.shell
    push:
    - match: (?=\S)
      set:
      - match: \b(in){{word_end}}
        scope: keyword.control.shell
        pop: true
      - include: parameters

  builtin_functions:
  - match: (\b(local|global|export|source)|\.){{word_end}}
    scope: storage.type.shell
    push:
    - include: assignment_statement
    - include: parameters
  - match: \b(echo|eval|unset|sleep|exit){{word_end}}
    scope: support.function.shell
    push: parameters
  - match: \b(alias)\s+({{function_id}})(=)
    captures:
      1: storage.type.alias.shell
      2: entity.name.alias.shell
      3: keyword.operator.assignment.shell
    push: assigned_value
  - match: \b(unalias)\s+({{function_id}})
    captures:
      1: support.function.builtin.unalias.shell
      2: variable.other.alias.shell

  assignment_statement:
  - match: ({{variable_id}})(=)
    captures:
      1: variable.other.definition.shell
      2: keyword.operator.assignment.shell
    push:
    - include: arrays
    - include: assigned_value

  assigned_value:
  - include: expression_tokens
  - include: tokens
  - include: pop_otherwise

  functions:
  - match: '(?:(function)\s+)?({{function_id}})\s*(\()(\))'
    captures:
      1: storage.type.function.shell
      2: entity.name.function.shell
      3: punctuation.section.parens.begin.shell
      4: punctuation.section.parens.end.shell
    push:
    - meta_scope: meta.function.shell
    - match: \{
      scope: punctuation.section.block.begin.shell
      set:
      - meta_scope: meta.function.shell meta.block.function.shell
      - match: \}
        scope: punctuation.section.block.end.shell
        pop: true
      - include: expressions

  arrays:
  - match: \(
    scope: punctuation.section.group.begin.shell
    push:
    - meta_scope: meta.group.array.shell
    - match: \)
      pop: true
    - include: expression_tokens

  redirections:
  - match: (?=\d*>)
    set:
    - match: '(\d*)(>>?)(&\d*)?'
      scope: meta.redirection.shell
      captures:
        2: keyword.operator.redirection.shell
    - include: inner_expression_terminators
    - include: expression_tokens
