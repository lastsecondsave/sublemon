%YAML 1.2
---
name: Sublime Syntax
scope: source.sublime-syntax
file_extensions: [sublime-syntax]

contexts:
  main:
    - match: (?=^variables:)
      push: scope:source.yaml
      with_prototype:
        - match: '(?=^contexts:)'
          pop: true
        - include: injection-variables
    - match: (?=^contexts:)
      scope: meta.section.variables.sublime-syntax
      push: scope:source.yaml
      with_prototype:
        - include: injection-contexts
    - match: ''
      embed: scope:source.yaml
      escape: (?=^(?:contexts|variables):)

  injection-contexts:
    - match: '(?=^  [\w-]+:(\s+#|\s*$))'
      embed: scope:source.yaml
      embed_scope: meta.context.sublime-syntax
      escape: (?=\s+#)|$

    - match: (match|escape|first_line_match)(:)
      captures:
        1: string.unquoted.plain.out.yaml entity.name.tag.yaml
        2: punctuation.separator.key-value.mapping.yaml
      push: regexp-value

  injection-variables:
    - match: ^  (\w+)(:)
      captures:
        1: meta.variables.sublime-syntax string.unquoted.plain.out.yaml entity.name.tag.yaml
        2: punctuation.separator.key-value.mapping.yaml
      push: regexp-value

  regexp-value:
    - match: \s+([>\|])(-?)\s*(#.*)?$
      captures:
        1: storage.modifier.chomping-indicator.yaml
        2: keyword.control.flow.block-scalar.literal.yaml
        3: comment.line.number-sign.yaml
      set:
        - match: ^(\s+)
          set:
            - meta_scope: source.regexp.embedded
            - include: scope:source.regexp
          with_prototype:
            - match: ^(?=\s*-?\s*\w+:)
              pop: true
            - include: variables
    - match: "'"
      scope: string.quoted.yaml
      set:
        - - match: (')|(\n)
            captures:
              1: string.quoted.single.yaml
              2: invalid.illegal.newline.yaml
            pop: true
        - - match: ''
            set: scope:source.regexp
            with_prototype:
              - include: variables
              - match: "''"
              - match: (?='|\n)
                pop: true
    - match: '"'
      scope: string.quoted.yaml
      set:
        - - match: (")|(\n)
            captures:
              1: string.quoted.double.yaml
              2: invalid.illegal.newline.yaml
            pop: true
        - - match: ''
            set: scope:source.regexp
            with_prototype:
              - include: variables
              - match: (?="|\n)
                pop: true
    - match: (?=\S)
      set: scope:source.regexp
      with_prototype:
        - include: variables
        - match: (?=\n|\s+#)
          pop: true
    - match: $
      pop: true

  variables:
    - match: '({{)[A-Za-z0-9_]+(}})'
      scope: variable.other.substitution.sublime-syntax
      captures:
        1: punctuation.definition.variable.begin.sublime-syntax
        2: punctuation.definition.variable.end.sublime-syntax
