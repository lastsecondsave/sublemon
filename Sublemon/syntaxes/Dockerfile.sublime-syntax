%YAML 1.2
---
name: Dockerfile
scope: source.dockerfile
version: 2
file_extensions:
  - Dockerfile
  - .dockerfile

contexts:
  prototype:
    - match: (\\)\n
      captures:
        1: punctuation.separator.continuation.line.dockerfile
    - match: ^\s*(#).*\n
      scope: comment.line.dockerfile
      captures:
        1: punctuation.definition.comment.dockerfile

  main:
    - match: ^(?i)(ONBUILD)\s+(?=[a-z])
      captures:
        1: storage.type.onbuild.dockerfile
      push: instructions

    - match: ^(?i)(ONBUILD)(?=\s|$)
      captures:
        1: storage.type.onbuild.dockerfile

    - match: ^(?=[a-zA-Z])
      push: instructions

  instructions:
    - match: (?i)(RUN)(?=\s|$)
      captures:
        1: keyword.control.dockerfile
      set: shell-command

    - match: (?i)(ENV|ARG)\s+((\w+)\s.*)
      captures:
        1: keyword.control.dockerfile
        2: meta.declaration.variable.dockerfile
        3: variable.other.readwrite.dockerfile
      pop: 1

    - match: (?i)(ENV|ARG|LABEL)(?=\s|$)
      captures:
        1: keyword.control.dockerfile
      set: key-value

    - match: (?i)(CMD|ENTRYPOINT)(?=\s|$)
      captures:
        1: keyword.control.dockerfile
      set: json-or-shell-command

    - match: (?i)(HEALTHCHECK)\s+(NONE)
      captures:
        1: keyword.control.dockerfile
        2: constant.language.dockerfile
      pop: 1

    - match: (?i)(HEALTHCHECK)(?=\s|$)
      scope: keyword.control.dockerfile
      set:
        - include: pop-on-line-end
        - match: (?i)CMD(?=\s|$)
          scope: keyword.control.dockerfile
          set: json-or-shell-command

    - match: (?i)(SHELL)(?=\s|$)
      captures:
        1: keyword.control.dockerfile
      set: json

    - match: (?i)(FROM)(?=\s|$)
      captures:
        1: keyword.control.dockerfile
      set: from-instruction

    - match: (?i)(ADD|COPY|WORKDIR|USER|EXPOSE|VOLUME|STOPSIGNAL)(?=\s|$)
      captures:
        1: keyword.control.dockerfile
      pop: 1

  from-instruction:
    - match: ([^\s:@]+)(?:([:@])(\S+))?
      captures:
        2: punctuation.separator.dockerfile
      set:
        - match: (?i)AS(?=\s|$)
          scope: keyword.control.dockerfile
          set:
            - match: \w+
              scope: entity.name.stage.dockerfile
              pop: 1
            - include: instruction-end
        - include: instruction-end
    - include: instruction-end

  instruction-end:
    - include: pop-on-line-end
    - match: (?=\S)
      pop: 1

  pop-on-line-end:
    - match: (?=\n)
      pop: 1

  pop-2-on-line-end:
    - match: (?=\n)
      pop: 2

  pop-on-space:
    - match: (?=\s)
      pop: 1

  pop-2-on-space:
    - match: (?=\s)
      pop: 2

  json-or-shell-command:
    - match: (?=\[)
      set: json
    - match: (?=\S)
      set: shell-command
    - include: pop-on-line-end

  json:
    - meta_content_scope: meta.json.dockerfile
    - include: pop-on-line-end

    - match: (?=\[)
      embed: scope:source.json#array
      embed_scope: source.json
      escape: (?<=])

  shell-command:
    - meta_content_scope: meta.shell-command.dockerfile
    - include: pop-on-line-end

    - match: (?=\S)
      embed: scope:source.shell.bash
      escape: (?<!\\)(?=\n)|^(?=\s*#)

  key-value:
    - meta_content_scope: meta.key-value.dockerfile
    - include: pop-on-line-end

    - match: (?=\S)
      push:
        - - meta_scope: meta.declaration.variable.dockerfile
        - - match: -?\d+(\.\d+)?(?=\s|$)
            scope: meta.value.dockerfile constant.numeric.dockerfile
            pop: 2
          - match: ""
            set:
              - meta_content_scope: meta.value.dockerfile
              - include: quoted-string
              - include: escapes
              - include: variables
              - include: pop-2-on-space
        - - meta_content_scope: variable.other.readwrite.dockerfile
          - include: quoted-string
          - include: escapes
          - include: variables
          - match: (?=\s)
            pop: 3
          - match: =
            scope: keyword.operator.assignment.dockerfile
            pop: 1

  quoted-string:
    - match: \"
      scope: punctuation.definition.string.begin.dockerfile
      push:
        - meta_scope: meta.string.dockerfile string.quoted.double.dockerfile
        - match: \"
          scope: punctuation.definition.string.end.dockerfile
          pop: 1
        - include: escapes
        - include: pop-on-line-end
        - match: (?=\$)
          push:
            - clear_scopes: 1
            - include: variables
            - match: ""
              pop: 1
    - match: \'
      scope: punctuation.definition.string.begin.dockerfile
      push:
        - meta_scope: meta.string.dockerfile string.quoted.single.dockerfile
        - match: \'
          scope: punctuation.definition.string.end.dockerfile
          pop: 1
        - include: pop-on-line-end

  escapes:
    - match: \\.
      scope: constant.character.escape.dockerfile

  variables:
    - match: (\$)(\{)
      captures:
        1: punctuation.definition.variable.dockerfile
        2: punctuation.section.interpolation.begin.dockerfile
      push:
        - meta_scope: meta.interpolation.parameter.dockerfile
        - match: \}
          scope: punctuation.section.interpolation.end.dockerfile
          pop: 1
        - include: pop-on-line-end
        - match: \w+
          scope: variable.other.readwrite.dockerfile
    - match: (\$)(\w+)
      scope: meta.interpolation.parameter.dockerfile
      captures:
        1: punctuation.definition.variable.dockerfile
        2: variable.other.readwrite.dockerfile
