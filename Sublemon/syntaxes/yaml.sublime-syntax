%YAML 1.2
---
name: YAML (Sublemon)
scope: source.yaml
file_extensions: [yaml, yml]

variables:
  value_terminator: (?=\s*(?:\s#|$))

contexts:
  main:
  - include: operators
  - include: comments
  - include: flow_yaml
  - include: keys
  - include: scalars
  - match: '^%\w+'
    scope: entity.name.directive.yaml
  - match: \S.*?{{value_terminator}}
    scope: string.unquoted.yaml

  flow_yaml:
  - match: '\{'
    scope: punctuation.section.flow.yaml
    push:
    - meta_scope: meta.section.flow.yaml
    - match: '\}'
      scope: punctuation.section.flow.yaml
      pop: true
    - include: flow_yaml_section
  - match: '\['
    scope: punctuation.section.flow.yaml
    push:
    - meta_scope: meta.section.flow.yaml
    - match: '\]'
      scope: punctuation.section.flow.yaml
      pop: true
    - include: flow_yaml_section
  - match: '[\]\}]'
    scope: invalid.illegal.stray.bracket

  flow_yaml_section:
  - include: comments
  - include: flow_yaml
  - include: keys
  - include: scalars
  - match: '([^\,\]\}\s].*?)\s*(?=[\,\]\}]|\s#|$)'
    captures:
      1: string.unquoted.yaml

  operators:
  - match: '^(---|\.{3})'
    scope: keyword.operator.yaml
  - match: '-(?=\s|$)'
    scope: keyword.operator.yaml
  - match: '(?:^|(?<=\s))([>\|]-?)'
    captures:
      1: keyword.operator.yaml

  comments:
  - match: ^\s*##\s(.*?\S)\s##$
    scope: comment.line.number-sign.yaml
    captures:
      1: comment.mark.yaml
  - match: (?:^|\s)(#.*$)
    captures:
      1: comment.line.number-sign.yaml

  scalars:
  - include: quoted_strings
  - include: numbers_and_constants

  numbers_and_constants:
  - match: '\b(?:0x[0-9a-fA-F]+|0o[0-7]+|[-+]?[0-9]+|[-+]?(?:\.[0-9]+|[0-9]+(?:\.[0-9]*)?)(?:[eE][-+]?[0-9]+)?){{value_terminator}}'
    scope: constant.numeric.yaml
  - match: '\b(?:[Tt]rue|TRUE|[Ff]alse|FALSE|[Nn]ull|NULL|\.nan|\.N[Aa]N|[-+]?\.(?:[Ii]nf|INF)){{value_terminator}}'
    scope: constant.language.yaml

  quoted_strings:
  - match: '"'
    scope: punctuation.definition.string.yaml
    push:
    - meta_scope: string.quoted.double.yaml
    - include: double_quoted_strings
  - match: (').*(')
    scope: string.quoted.single.yaml
    captures:
      1: punctuation.definition.string.yaml
      2: punctuation.definition.string.yaml
  - match: "'"
    scope: punctuation.definition.string.yaml
    push:
    - meta_scope: string.quoted.single.yaml
    - match: "'"
      scope: punctuation.definition.string.yaml
      pop: true

  double_quoted_strings:
  - match: '"'
    scope: punctuation.definition.string.yaml
    pop: true
  - include: double_quoted_escapes

  double_quoted_escapes:
  - match: '\\[0abtnvfre"/\\N_LP ]'
    scope: constant.character.escape.yaml
  - match: '\\(?:x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4}|U[0-9a-fA-F]{8})'
    scope: constant.character.escape.unicode.yaml
  - match: \\.
    scope: invalid.illegal.escape

  keys:
  - match: (?=".+?":\s)
    push:
    - meta_scope: meta.key.yaml
    - match: \s*(:)
      captures:
        1: punctuation.separator.mapping.yaml
      pop: true
    - match: '"'
      scope: punctuation.definition.string.yaml
      push:
      - meta_scope: entity.name.key.yaml
      - include: double_quoted_strings
  - match: ('(.+?)')\s*(:)(?:\s|$)
    scope: meta.key.yaml
    captures:
      1: string.quoted.single.yaml
      2: entity.name.key.yaml
      3: punctuation.separator.mapping.yaml
  - match: '([^\s''"].*?)\s*(:)(?=\s|$)'
    scope: meta.key.yaml
    captures:
      1: entity.name.key.yaml
      2: punctuation.separator.mapping.yaml
