%YAML 1.2
---
name: Java
scope: source.java
file_extensions: [java]
first_line_match: package\s+\w+(\.\w+)*;

variables:
  id: (?:\b[a-zA-Z]\w*\b)
  small_id: (?:\b[a-z]\w*\b)
  class_id: (?:\b[A-Z]\w*\b)
  escape: '\\(?>[bfnrt''"\\]|u[0-9a-fA-F]{4})'
  number: (?:[0-9][0-9_]*)
  before_non_space: (?=\S)
  before_space: (?=\s)
  b: (?<!\.)\b

contexts:
  prototype:
  - include: comments

  main:
  - include: before_class_section
  - include: classes
  - include: code_section

  code_section:
  - include: strings
  - include: constants
  - include: operators
  - include: storage
  - include: keywords
  - include: annotations
  - include: lambda_parameters_list
  - include: bracket_balancing

  before_class_section:
  - match: '{{b}}(?=package\b)'
    push:
    - meta_scope: meta.package.java
    - match: package
      scope: keyword.package.java
      push: [package, pop_before_non_space_same_line]
    - include: pop_on_any
  - match: '{{b}}(?=import\b)'
    push:
    - meta_scope: meta.import.java
    - match: (import)(?:\s+(static))?
      captures:
        1: keyword.import.java
        2: keyword.import.static.java
      push: [import_class_name, package, pop_before_non_space_same_line]
    - include: pop_on_any
  - include: annotations

  import_class_name:
  - include: storage_class
  - match: \*
    scope: storage.type.asterisk.java
  - match: \.
    push: package
  - include: pop_before_non_space

  bracket_balancing:
  - match: \{
    push:
    - include: pop_on_closed_curly_bracket
    - include: code_section
  - match: \(
    push:
    - include: pop_on_closed_round_bracket
    - match: ;
      scope: invalid.illegal.unexpected-semicolon
    - include: code_section
  - match: \[
    push:
    - match: \]
      pop: true
    - match: ;
      scope: invalid.illegal.unexpected-semicolon
    - include: code_section
  - match: '[)}\]]'
    scope: invalid.illegal.stray-bracket

  pop_before_non_space:
  - match: '{{before_non_space}}'
    pop: true

  pop_before_non_space_same_line:
  - match: '[\t ]*'
    pop: true

  pop_before_space:
  - match: '{{before_space}}'
    pop: true

  pop_on_any:
  - match: ''
    pop: true

  pop_on_fence:
  - match: '[{}]'
    pop: true

  pop_on_closed_curly_bracket:
  - match: \}
    pop: true

  pop_on_closed_round_bracket:
  - match: \)
    pop: true

  comments:
  - match: /\*\*(?!/)
    push: javadoc
  - match: ^\s*/\*\*\s(.*?\S)\s\*\*/
    scope: comment.block.java
    captures:
      1: comment.mark.java
  - match: /\*.*?\*/
    scope: comment.block.java
  - match: /\*
    push:
    - meta_scope: comment.block.java
    - match: \*/
      pop: true
  - match: //.*$
    scope: comment.line.java
  - match: ^(?><{7}|={7}|>{7}).*$
    scope: comment.line.merge.java

  javadoc:
  - meta_scope: comment.block.documentation.java
  - match: \*/
    pop: true
  - match: '@(?>param)\s+[\w<>]*'
    scope: keyword.documentation.javadoc.java
  - match: (\{\s*@(?>code|literal|link))
    scope: keyword.documentation.inline.javadoc.java
    push:
    - meta_scope: no-spellcheck.java
    - match: \}
      scope: keyword.documentation.inline.javadoc.java
      pop: true
  - match: '(@author)\s+(.*)'
    captures:
      1: keyword.documentation.javadoc.java
      2: no-spellcheck.java
  - match: '@[\w.]+'
    scope: keyword.javadoc.java
  - match: (</?)\w+.*?(/?>)
    scope: meta.tag.javadoc.java
    captures:
      1: punctuation.definition.tag.begin.javadoc
      2: punctuation.definition.tag.end.javadoc

  strings:
  - match: '"'
    push:
    - meta_include_prototype: false
    - meta_scope: string.quoted.double.java
    - match: '"|$'
      pop: true
    - match: '{{escape}}'
      scope: constant.character.escape.java
    - match: \\.
      scope: invalid.illegal.wrong-escape
    - match: '[^"](?=\n)$'
      scope: invalid.illegal.missing-quote

  constants:
  - match: '\b(?>0[xX][0-9a-fA-F_]+|0[0-7_]+)[Ll]?\b'
    scope: constant.numeric.java
  - match: '(?:(?<=[\s=+*/%-(]|^)-)?\b{{number}}(\.{{number}}?)?(?:[eE][+-]?{{number}})?[lLfFdD]?\b'
    scope: constant.numeric.java
  - match: '''(?>{{escape}}|.)'''
    scope: constant.character.java
  - match: '{{b}}(?>false|null|true)\b'
    scope: constant.language.java
  - match: '{{b}}(?>this|super)\b'
    scope: variable.language.java

  storage:
  - match: '{{b}}(?>void|boolean|byte|char|short|int|float|long|double)\b'
    scope: storage.type.primitive.java
  - match: '{{b}}(?>default|public|private|protected|static|final|native|synchronized|abstract|transient|strictfp|volatile)\b'
    scope: storage.modifier.java
  - match: \b[A-Z][A-Z_0-9]+\b
    scope: constant.user.java
  - include: storage_class

  storage_class:
  - match: \b[A-Z]\b
    scope: storage.type.generic.java
  - match: '{{class_id}}'
    scope: storage.type.java
    push: generic
  - include: package_before_class_name

  package_before_class_name:
  - match: \b(?=(?:{{small_id}}\.)+{{class_id}})
    push: package

  package:
  - match: '{{small_id}}'
    scope: storage.type.package.java
  - match: (?=[^a-z.])
    pop: true

  methods_generic:
  - match: '(?=<[^>]+?(?>extends|super).+?>)'
    push: generic

  generic:
  - match: '\s*<'
    set:
    - meta_scope: meta.generic.java
    - match: '>'
      pop: true
    - match: \?
      scope: storage.type.wildcard.java
    - match: \&
      scope: keyword.operator.java
    - match: \b(?>extends|super)\b
      scope: storage.modifier.java
    - include: storage_class
    - include: pop_on_fence
  - include: pop_on_any

  operators:
  - match: '->'
    scope: keyword.operator.lambda.java
  - match: (?>[&|+-]{1,2}|(?>[+*/%&^|<>=-]|<<|>>>?)=?|!=)
    scope: keyword.operator.java
  - match: (::)(new)?
    captures:
      1: keyword.operator.java
      2: keyword.operator.alphanumeric.java
  - match: '[!~]'
    scope: keyword.operator.unary.java
  - match: \?
    scope: keyword.operator.ternary.java
    push:
    - match: ':'
      scope: keyword.operator.ternary.java
      pop: true
    - include: code_section
  - match: '{{b}}instanceof\b'
    scope: keyword.operator.alphanumeric.java
  # 'new' can come after a dot
  - match: '\bnew\b'
    scope: keyword.operator.alphanumeric.java
    push: [new_statement, pop_before_non_space]
  - match: \.
    push:
    - include: angular_brackets
    - include: pop_before_non_space

  new_statement:
  - include: storage
  # new type[]
  - match: \[
    set:
    - match: \]
      pop: true
    - include: code_section
  # new Type()
  - match: \(
    set:
    - match: \)
      set: anonymous_class_body
    - include: code_section

  angular_brackets:
  - match: '<'
    push:
    - match: '>'
      pop: true
    - include: code_section

  keywords:
  - match: '{{b}}(?>assert|break|continue|else|finally|return|throw)\b'
    scope: keyword.control.java
  # expr (), then possible {}
  - match: '{{b}}(?>if|try|while)\b'
    scope: keyword.control.java
    push: round_brackets_no_semicolon
  # do-while
  - match: '{{b}}do\b'
    scope: keyword.control.java
    push:
    - match: '{{b}}while\b'
      scope: keyword.control.java
      pop: true
    - include: code_section
  # switch
  - match: '{{b}}switch\b'
    scope: keyword.control.java
    push: [switch_body, no_semicolon, switch_condition]
  # for
  - match: '{{b}}for\b'
    scope: keyword.control.java
    push: [no_semicolon, for_condition]
  # catch
  - match: '{{b}}catch\b'
    scope: keyword.control.java
    push: [no_semicolon, parameters_list]

  switch_condition:
  - match: \(
    set:
    - match: ({{small_id}})\s*(?=\))|(?=\S)
      captures:
        1: variable.parameter.java
      set:
      - match: \)
        pop: true
      - include: code_section
  - include: pop_before_non_space

  switch_body:
  - match: \{
    set:
    - include: pop_on_closed_curly_bracket
    - match: (?>case|default)
      scope: keyword.control.java
    - include: code_section
  - include: pop_before_non_space

  for_condition:
  - match: \(
    set:
    - include: pop_on_closed_round_bracket
    - match: '[;:]'
      # scope: keyword.operator.java
    - match: \s({{small_id}})(?=\s*:)
      captures:
        1: variable.parameter.java
    - include: code_section
  - include: pop_before_non_space

  parameters_list:
  - match: \(
    set:
    - include: pop_on_closed_round_bracket
    - include: pop_on_fence
    - include: code_section
    - include: parameters

  parameters:
  - match: '{{id}}'
    scope: variable.parameter.java

  round_brackets_no_semicolon:
  - match: \(
    set:
    - match: \)
      set: no_semicolon
    - include: code_section
  - include: pop_before_non_space

  no_semicolon:
  - match: ';'
    scope: invalid.illegal.bad-semicolon
  - include: pop_before_non_space

  annotations:
  - match: '@(?!in)'
    scope: punctuation.definition.annotation.java
    push: [annotation_parameters, annotation_identifier]

  annotation_identifier:
  - meta_scope: meta.annotation.identifier.java
  - match: '\.?{{class_id}}'
    scope: storage.type.annotation.java
  - include: package_before_class_name
  - include: pop_on_any

  annotation_parameters:
  - match: \(
    set:
    - include: pop_on_closed_round_bracket
    - match: '{{id}}(?=\s*=)'
      scope: variable.parameter.annotation.java
    - include: code_section
  - include: pop_before_non_space

  classes:
  - match: '{{b}}(?=class\s)'
    push: [class_body, implements_statement, extends_statement, class_identifier]
  - match: '{{b}}(?=interface\s)'
    push: [class_body, extends_statement, class_identifier]
  - match: '{{b}}(?=enum\s)'
    push: [enum_body, implements_statement, class_identifier]
  - match: '{{b}}(?=@interface\s)'
    push: [class_body, class_identifier]

  class_identifier:
  - meta_scope: meta.class.identifier.java
  - match: (?>[\w@]+)
    scope: storage.type.modifier.java
    push:
    - - match: '{{class_id}}'
        scope: entity.name.type.java
        set: generic
      - include: package_before_class_name
      - include: pop_on_any
    - pop_before_non_space
  - include: pop_on_any

  extends_statement:
  - match: \bextends\b
    scope: keyword.java
    set:
    - - match: ','
        push: [inherited_class_name, pop_before_non_space]
      - include: pop_before_non_space
    - inherited_class_name
  - include: pop_before_non_space

  implements_statement:
  - match: \bimplements\b
    scope: keyword.java
    set:
    - - match: ','
        push: [inherited_class_name, pop_before_non_space]
      - include: pop_before_non_space
    - inherited_class_name
  - include: pop_before_non_space

  inherited_class_name:
  - match: '{{before_non_space}}'
    set:
    - match: '({{class_id}})(?>\.(?={{class_id}}))+'
      captures:
        1: entity.other.inherited-class.java
    - match: '{{class_id}}'
      scope: entity.other.inherited-class.java
      set: generic
    - include: package_before_class_name
    - match: '{{id}}'
    - include: pop_on_any

  class_body:
  - match: \{
    scope: punctuation.definition.class.begin.java
    set:
    - meta_scope: meta.class.body.java
    - include: class_closed_curly_bracket
    - include: class_body_section
  - include: pop_before_non_space

  anonymous_class_body:
  - match: \{
    scope: punctuation.definition.class.begin.java
    set:
    - meta_scope: meta.class.body.anonymous.java
    - include: class_closed_curly_bracket
    - include: class_body_section
  - include: pop_before_non_space

  enum_body:
  - match: \{
    scope: punctuation.definition.class.begin.java
    set:
    - meta_scope: meta.class.body.enum.java
    - include: class_closed_curly_bracket
    - match: '{{before_non_space}}'
      push: [enum_declarations, enum_constants]
  - include: pop_before_non_space

  enum_constants:
  - match: '{{id}}'
    scope: constant.user.enum.java
    push:
    - match: \(
      set:
      - include: pop_on_closed_round_bracket
      - include: code_section
    - include: pop_before_non_space
  - match: ';|(?=\})'
    pop: true
  - include: annotations
  - include: pop_on_fence

  enum_declarations:
  - match: (?=\})
    pop: true
  - include: class_body_section

  class_body_section:
  - include: fields
  - include: methods
  - include: methods_generic
  - include: classes
  - include: angular_brackets
  - include: code_section

  class_closed_curly_bracket:
  - match: \}
    scope: punctuation.definition.class.end.java
    pop: true

  fields:
  - match: '='
    scope: keyword.operator.java
    push:
    - match: ';'
      pop: true
    - include: code_section

  methods:
  - match: '(?={{id}}\s*\()'
    push: [method_body, throws_statement, method_identifier]

  method_identifier:
  - meta_scope: meta.method.identifier.java
  - match: '{{id}}'
    scope: entity.name.function.java
    set:
    - - include: method_parameters_list
    - - meta_scope: meta.method.identifier.java
      - include: pop_before_non_space

  method_parameters_list:
  - match: \(
    set:
    - meta_scope: meta.method.identifier.java meta.method.parameters.java
    - include: pop_on_closed_round_bracket
    - include: pop_on_fence
    - include: code_section
    - include: parameters

  method_body:
  - match: \{
    set:
    - meta_scope: meta.method.body.java
    - include: pop_on_closed_curly_bracket
    - include: code_section
  - include: pop_before_non_space

  throws_statement:
  - match: \bthrows\b
    scope: keyword.java
    set:
    - - match: ','
        push: [throws_class_name, pop_before_non_space]
      - include: pop_before_non_space
    - throws_class_name
    - pop_before_non_space
  - include: pop_before_non_space

  throws_class_name:
  - match: '{{class_id}}'
    scope: entity.other.throwable.java
    set: generic
  - include: package_before_class_name
  - include: pop_on_any

  lambda_parameters_list:
  - match: '({{id}})(?=\s*->)'
    scope: variable.parameter.function.java
  - match: (?=\([^(]*?\)\s*->)
    push: parameters_list
