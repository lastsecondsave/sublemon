# [PackageDev] target_format: plist, ext: tmLanguage
name: JavaScript
scopeName: source.js
fileTypes: [js, jsm]

patterns:
- include: '#code'

repository:
  code:
    patterns:
    - include: '#comments'
    - include: '#strings'
    - include: '#keywords'
    - include: '#operators'
    - include: '#constants'
    - include: '#support'
    - include: '#functions'
    - begin: '{'
      end: '}'
      patterns:
      - include: '#code'

  comments:
    patterns:
    - name: comment.block.js
      match: /\*.*?\*/
    - name: comment.block.js
      begin: /\*
      end: \*/
    - name: comment.line.js
      match: //.*$

  strings:
    patterns:
    - name: string.quoted.js
      begin: "(['\"])"
      end: '\1|(?<!\\)\n'
      patterns:
      - name: invalid.string.quoted.js
        match: "[^'\"\\\\](?=\n)"
      - name: constant.character.escape.js
        match: \\([bfnrt'"\\]|u[0-9a-fA-F]{4})
      - name: constant.character.multiline.js
        match: \\(?=\n)
      - name: invalid.character.escape.js
        match: \\.
    - begin: (?<=[=(:,&|?]|^|return)\s*(?=/[^/*+?])
      end: (?<=[/igm])
      patterns:
      - name: string.regexp.js
        contentName: source.regexp.js
        begin: '/'
        end: /[igm]*
        patterns:
        - include: source.regexp

  keywords:
    patterns:
    - name: keyword.control.js
      match: \b(break|case|catch|continue|default|do|else|finally|for|if|return|switch|throw|try|while|yield|delete)\b
    - match: \b(new)\s+([\w_$]+)\b
      captures:
        '1': {name: keyword.control.js}
        '2': {name: support.class.js}

  operators:
    patterns:
    - name: keyword.operator.symbolic.js
      match: '[&|+-]{1,2}|([+*/%&^|<>=-]|<<|>>>?)=?|[=!]==?|<>'
    - name: keyword.operator.unary.js
      match: '[!~]'
    - begin: '\?'
      end: ':'
      captures:
        '0': {name: keyword.operator.ternary.js}
      patterns:
      - include: "#code"
    - name: keyword.operator.character.js
      match: \b(in|of|typeof|void|with)\b
    - match: \b(instanceof)\s+([\w_$]+)\b
      captures:
        '1': {name: keyword.operator.character.js}
        '2': {name: support.class.js}

  constants:
    patterns:
    - name: constant.numeric.js
      match: \b(0[xX][0-9a-fA-F]+|0[0-7]+)\b
    - name: constant.numeric.js
      match: ((?<=\s|[=+*/%-(]|^)-)?\b[0-9]+\.?[0-9]*([eE][+-]?[0-9]+)?\b
    - name: constant.language.js
      match: \b(false|Infinity|NaN|null|true|undefined)\b
    - name: variable.language.js
      match: \b(this)\b
    - name: variable.constant.js
      match: \b[A-Z][A-Z0-9_]+\b
    - name: storage.type.js
      match: \b(var|let)\b

  support:
    patterns:
    - name: support.constant.js
      match: \b(console|window|document)\b
    - name: support.class.js
      match: \b(JSON|Math|Object|Function)\b
    - name: support.function.js
      match: \b(decodeURI(Component)?|encodeURI(Component)?|eval|is(Finite|NaN)|parse(Float|Int))\b
    - name: support.function.js
      match: (?<=.)bind(?=\s*\()
    - match: \b([\w_$]+)\.(prototype)\b
      captures:
        '1': {name: support.type.js}
        '2': {name: keyword.other.js}

  functions:
    patterns:
    - name: meta.function.js
      begin: (?:\b([\w$]+)\s*(?:(=)|:)\s*(function)|(function)\s*([\w$]+)?)(?=\s*\()
      end: '}'
      beginCaptures:
        '1': {name: entity.name.function.js}
        '2': {name: keyword.operator.symbolic.js}
        '3': {name: storage.type.function.js}
        '4': {name: storage.type.function.js}
        '5': {name: entity.name.function.js}
      patterns:
      - begin: \(
        end: \)
        patterns:
        - name: variable.parameter.function.js
          match: \w+
      - begin: '{'
        end: (?=})
        patterns:
        - include: '#code'
