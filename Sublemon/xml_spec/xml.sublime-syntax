%YAML 1.2
---
name: XML
scope: source.xml
file_extensions: [xml]
first_line_match: '<\?xml.*\?>'

variables:
  id: '[-.\w]+'

contexts:
  prototype:
  - include: comments_pack

  main:
  - match: '(<\?)\s*({{id}})'
    captures:
      1: punctuation.definition.tag.instruction.begin.xml
      2: entity.name.tag.instruction.xml
    push:
    - meta_scope: meta.instruction.xml
    - match: '\?>'
      scope: punctuation.definition.tag.instruction.end.xml
      pop: true
    - include: tag_internals_pack
  - include: doctype_pack
  - match: '(?=<{{id}})'
    push: xml

  xml:
  - include: tags_pack
  - include: cdata_pack
  - include: entities_pack
  - include: substitutions_pack

  pop_otherwise:
  - match: ''
    pop: true

  spaces:
  - match: '(?=\S)'
    pop: true

  comments_pack:
  - match: "<!--"
    push:
    - meta_scope: comment.block.xml
    - match: "-->"
      pop: true
    - match: "--"
      scope: invalid.illegal.bad-comments.xml
  - match: "-->"
    scope: invalid.illegal.bad-comments.xml

  entities_pack:
  - match: '&(?:[:a-zA-Z_][:\w.-]*|#[0-9]+|#x[0-9a-fA-F]+);'
    scope: constant.character.entity.xml
  - match: '[&<]'
    scope: invalid.illegal.entity.xml

  string:
  - match: '"'
    set: [double_quoted_string_scope, double_quoted_string]
  - match: "'"
    set: [single_quoted_string_scope, single_quoted_string]
  - include: pop_otherwise

  double_quoted_string_scope:
  - meta_scope: string.quoted.double.xml
  - include: pop_otherwise

  double_quoted_string:
  - meta_include_prototype: false
  - match: '"'
    pop: true
  - include: string_internals_pack

  single_quoted_string_scope:
  - meta_scope: string.quoted.single.xml
  - include: pop_otherwise

  single_quoted_string:
  - meta_include_prototype: false
  - match: "'"
    pop: true
  - include: string_internals_pack

  strings_pack:
  - match: (?=['"])
    push: string

  string_internals_pack:
    - include: entities_pack
    - include: substitutions_pack

  cdata_pack:
  - match: '<!\[CDATA\['
    scope: punctuation.definition.cdata.xml
    push:
    - meta_scope: meta.cdata.xml
    - meta_content_scope: string.cdata.xml
    - meta_include_prototype: false
    - match: \]\]>
      scope: punctuation.definition.cdata.xml
      pop: true
    - include: substitutions_pack

  tags_pack:
  # Opening and single tag
  - match: '(<)(?:({{id}})(:))?({{id}})'
    captures:
      1: punctuation.definition.tag.begin.xml
      2: entity.name.tag.namespace.xml
      3: punctuation.separator.namespace.xml
      4: entity.name.tag.localname.xml
    push:
    - meta_scope: meta.tag.xml
    - match: '/?>'
      scope: punctuation.definition.tag.end.xml
      pop: true
    - include: tag_internals_pack
  # Closing tag
  - match: '(</)(?:({{id}})(:))?({{id}})\s*(>)'
    scope: meta.tag.xml
    captures:
      1: punctuation.definition.tag.begin.xml
      2: entity.name.tag.namespace.xml
      3: punctuation.separator.namespace.xml
      4: entity.name.tag.localname.xml
      5: punctuation.definition.tag.end.xml

  tag_internals_pack:
  - match: '(?:({{id}})(:))?({{id}})'
    captures:
      1: entity.name.attribute.namespace.xml
      2: punctuation.separator.namespace.xml
      3: entity.name.attribute.localname.xml
    push: [attribute_scope, attribute_value, spaces]

  attribute_scope:
  - meta_scope: meta.attribute.xml
  - include: pop_otherwise

  attribute_value:
  - match: '='
    scope: punctuation.separator.attribute.xml
    set: [space_check, string, spaces]
  - include: pop_otherwise

  space_check:
  - match: '{{id}}'
    scope: invalid.illegal.no-space
  - include: pop_otherwise

  doctype_pack:
  - match: '(<!)(DOCTYPE)\s*({{id}})'
    captures:
      1: punctuation.definition.tag.begin.xml
      2: entity.name.tag.xml
      3: entity.name.doctype.element.xml
    push:
    - meta_scope: meta.tag.doctype.xml
    - match: '>'
      scope: punctuation.definition.tag.end.xml
      pop: true
    - match: (?:SYSTEM|PUBLIC)
      scope: keyword.doctype.xml
    - match: \[
      scope: punctuation.definition.doctype.begin.xml
      push: doctype_element
    - include: strings_pack

  doctype_element:
  - match: \]
    scope: punctuation.definition.doctype.end.xml
    pop: true
  - match: '(<!)(ELEMENT|ATTLIST)\s*({{id}})'
    captures:
      1: punctuation.definition.tag.begin.xml
      2: entity.name.tag.xml
      3: entity.name.doctype.element.xml
    push:
    - meta_scope: meta.tag.doctype.element.xml
    - match: '>'
      scope: punctuation.definition.tag.end.xml
      pop: true
    - include: strings_pack

  substitutions_pack:
  - match: '(\$\{).*?(?:(:).*?)?(\})'
    scope: variable.user.substitution.xml
    captures:
      1: punctuation.definition.substitution.xml
      2: punctuation.definition.substitution.xml
      3: punctuation.definition.substitution.xml
